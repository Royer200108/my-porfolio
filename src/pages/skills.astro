---
import { Image } from "astro:assets"
import Layout from "../layouts/Layout.astro"
import TextBox from "../components/TextBox.astro"
import ConsoleDiv from "../components/ConsoleDiv.astro"
import SkillCards from "../components/SkillCards.astro"

const tecnologicalsSkills = [
    
    { 
        title: 'Lenguajes de programacion', 
        elements:[
            { title: 'Java', href: '/images/skills/java.png' },
            { title: 'JavaScript', href:'/images/skills/js.png' },
            { title: 'TypeScript', href: '/images/skills/typescript.png' },
            { title: 'Bash', href: '/images/skills/gnu-bash.png' },
            { title: 'Python', href: '/images/skills/python.png' },
        ]
    },
    { 
        title: 'Frameworks', 
        elements:[
            { title: 'SpringBoot', href: '/images/skills/springboot.png'},
            { title: 'NodeJS', href: '/images/skills/nodejs.png'},
            { title: 'BootsTrap', href: '/images/skills/bootstrap.png'},
        ]
    },
    { 
        title: 'Herramientas Web', 
        elements:[
            { title: 'HTML', href: '/images/skills/html.png'},
            { title: 'CSS', href: '/images/skills/css.png'},
        ]
    },
    { 
        title: 'Versionamiento', 
        elements:[
            { title: 'Git', href: '/images/skills/git.png'},
            { title: 'GitHub', href: '/images/skills/github.png'},
        ]
    },
    { 
        title: 'Sistemas operativos y entornos de desarrollo', 
        elements:[
            { title: 'Linux', href: '/images/skills/linux.png'},
            { title: 'Windows', href: '/images/skills/windows.png'},
            { title: 'jupyter', href: '/images/skills/jupyter.png'},
            { title: 'VSCode', href: '/images/skills/vscode.png'},
            { title: 'Eclipse', href: '/images/skills/eclipse.png'},
            { title: 'Google Colab', href: '/images/skills/google-colab.png'},
        ]
    },
    { 
        title: 'Herramientas de infraestructura', 
        elements:[
            { title: 'Terraform', href: '/images/skills/terraform.png'},
        ]
    },
]

const softSkills = [

    {   
        label: 'Liderazgo y gesti√≥n',
        elements: [
            {
                emoji:'ü§ù',
                title:'Liderazgo',
                description: 'Me esfuerzo por guiar con empat√≠a y visi√≥n, empoderando a los dem√°s para que alcancen sus metas mientras promovemos juntos un ambiente de crecimiento y √©xito compartido.'
            },
            {
                emoji:'üîÑ',
                title:'Gesti√≥n de cambios',
                description: 'Apoyo la gesti√≥n de cambios como una oportunidad para innovar, adaptarnos y mejorar continuamente.'
            },
            {
                emoji:'‚è∞',
                title:'Gesti√≥n del tiempo',
                description: 'Gestiono el tiempo de manera estrat√©gica, priorizando tareas clave, estableciendo metas claras y optimizando recursos.'
            },
        ]
    },
    {
        label: 'Desarrollo personal',
        elements: [
            {
                emoji:'üå±',
                title:'Resiliente',
                etiqueta: 'Desarrollo personal',
                description: 'Me considero alguien capaz de adaptarme a los desaf√≠os y aprender de las dificultades.'
            },
        ]
    }

]
---

<Layout title="Habilidades - Roger Barahona">

    <div slot="left-side" class="flex flex-col space-y-4 justify-center items-center">
        <div class="flex flex-col space-y-4 justify-center items-center">
            <div id="hardSkillsText" class="flex flex-col space-y-4 justify-center items-center">
                <TextBox 
                    title1="¬øHabilidades t√©cnicas?" 
                    title2="¬øQu√© incluyen mis habilidades t√©cnicas?"
                    content1=""
                    content2="Me he desempe√±ado m√°s en el desarrollo con tecnolog√≠as web como HTML, CSS, JavaScript, TypeScript y Node.js, sin embargo, he tenido la oportunidad de colaborar en el desarrollo de proyectos con una mayor cantidad de tecnolog√≠as como las que se ven a continuaci√≥n."
                />
            </div>

            <div id="softSkillsText" class="flex flex-col space-y-4 justify-center items-center sr-only">
                <TextBox 
                    title1="¬øHabilidades blandas?" 
                    title2="¬øQu√© incluyen mis habilidades blandas?"
                    content1=""
                    content2="Con el pasar del tiempo he vivido muchas experiencias las cuales me han formado como persona y me han ayudado a ser mejor en mi vida personal como profesional."
                />
            </div>

            <div class="w-2/3 flex">
                <ul class="bg-container w-full flex justify-around items-center bg-slate-300 rounded-full p-1">
                    <li >
                        <a id="softSkills" class="text-base flex items-center justify-center w-60 p-2 h-10 text-white rounded-full hover:text-black" href="">Habilidades t√©cnicas</a>
                    </li>
                    <li>
                        <a id="hardSkills" class="flex items-center justify-center w-60 p-2 h-10  text-white rounded-full hover:text-black" href="">Habilidades blandas</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
        

    <div slot="rigth-side" class="w-max flex flex-col space-y-4 justify-center items-center pt-4 pb-4">
        <div id="hardSkillsCard" style="display: block;" class="flex flex-col space-y-4 justify-center items-center">
            <ConsoleDiv content="">
                    {tecnologicalsSkills.map((item) => (
                        <p> >. {item.title}</p>
                        <div class="flex p-4">
                            {item.elements.map((element) =>(
                                <div style="width: 90px; heigth: 90px" class="p-2 bg-white rounded-lg m-2 image-container z-10">
                                    <Image
                                        src={element.href}
                                        alt=""
                                        width={70}
                                        height={70}
                                        class=""
                                    />
                                    <span class="hover-text">{element.title}</span>
                                </div>
                            ))}
                        </div>
                    ))}
            </ConsoleDiv>
        </div>

        <div id="softSkillsCard" style="display: block;" class="flex flex-col space-y-4 justify-center items-center sr-only">
            <ConsoleDiv content="">
                    {softSkills.map((item) => (
                        <p> >. {item.label}</p>
                        <div class="grid grid-cols-2 p-4 " style="color:black">
                            {item.elements.map((element) =>(
                                <SkillCards 
                                emoji={ element.emoji } 
                                title={element.title} 
                                description={element.description}/>
                            ))}
                        </div>
                    ))}
            </ConsoleDiv>
        </div>
    </div>

</Layout>

<script>
    // Llamada a la funci√≥n con los IDs correspondientes
toggleSkillsVisibility('hardSkills', 'softSkills', 'hardSkillsText', 'hardSkillsCard', 'softSkillsText', 'softSkillsCard');
toggleSkillsVisibility('softSkills', 'hardSkills', 'softSkillsText', 'softSkillsCard', 'hardSkillsText', 'hardSkillsCard');

// Definici√≥n de la funci√≥n toggleSkillsVisibility en TypeScript
function toggleSkillsVisibility(
    a1Id: string,
    a2Id: string,
    div1Id: string,
    div2Id: string,
    div3Id: string,
    div4Id: string
): void {
    // Obtiene el primer anchor y le a√±ade el evento click
    document.getElementById(a1Id)?.addEventListener('click', function (event: Event) {
        event.preventDefault();

        // Obtiene los elementos del DOM
        const a1 = document.getElementById(a1Id) as HTMLAnchorElement | null;
        const a2 = document.getElementById(a2Id) as HTMLAnchorElement | null;
        const div1 = document.getElementById(div1Id) as HTMLDivElement | null;
        const div2 = document.getElementById(div2Id) as HTMLDivElement | null;
        const div3 = document.getElementById(div3Id) as HTMLDivElement | null;
        const div4 = document.getElementById(div4Id) as HTMLDivElement | null;

        // Verificaci√≥n de que todos los elementos existen
        if (div1 && div2 && div3 && div4 && a1 && a2) {
            // Si el div1 no contiene la clase 'sr-only', realiza los cambios
            if (!div1.classList.contains('sr-only')) {
                // Cambia el color de fondo de los anchors
                a1.style.backgroundColor = 'rgb(58, 145, 136)';
                a2.style.backgroundColor = 'rgba(58, 145, 136, 0)';

                // Agrega y remueve las clases correspondientes
                div1.classList.add('sr-only');
                div2.classList.add('sr-only');
                div3.classList.remove('sr-only');
                div4.classList.remove('sr-only');
            }
        }
    });
}

</script>

<style>
    #softSkills {
        background-color: rgb(58, 145, 136);
    }

    .bg-container{
        background-color: rgb(11, 115, 103);
    }

/* Contenedor de la imagen */
        .image-container {
            position: relative;
            display: inline-block;
        }
        .image-container:hover{
            box-shadow: 5px 5px 5px 5px teal;
        }

        /* Texto oculto inicialmente */
        .image-container .hover-text {
            visibility: hidden;
            width: 140px;
            background-color: rgba(11, 117, 104, 0.5);;
            color: #fff;
            text-align: center;
            padding: 2px;
            border-radius: 5px;

            /* Posici√≥n del texto sobre la imagen */
            position: absolute;
            bottom: 100%; /* Colocar el texto sobre la imagen */
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            z-index: 1; /* Asegurar que el texto est√© por encima de la imagen */
        }

        /* Mostrar el texto al hacer hover sobre la imagen */
        .image-container:hover .hover-text {
            visibility: visible;
            opacity: 1;
        }

</style>